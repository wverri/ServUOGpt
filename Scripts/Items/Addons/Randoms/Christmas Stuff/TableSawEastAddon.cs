////////////////////////////////////////
//                                     //
//   Generated by CEO's YAAAG - Ver 2  //
// (Yet Another Arya Addon Generator)  //
//    Modified by Hammerhand for       //
//      SA & High Seas content         //
//                                     //
////////////////////////////////////////

namespace Server.Items
{
    public class TableSawEastAddon : BaseAddon
    {
        private static int[,] m_AddOnSimpleComponents = new int[,]
        {
            {4528, 1, 0, 4} // 4	
        };


        public override BaseAddonDeed Deed { get { return new TableSawEastAddonDeed(); } }

        [Constructable]
        public TableSawEastAddon()
        {
            for (int i = 0; i < m_AddOnSimpleComponents.Length / 4; i++)
            {
                AddComponent(new AddonComponent(m_AddOnSimpleComponents[i, 0]), m_AddOnSimpleComponents[i, 1],
                    m_AddOnSimpleComponents[i, 2], m_AddOnSimpleComponents[i, 3]);
            }


            AddComplexComponent((BaseAddon) this, 12437, 0, 1, 0, 1600, -1, "", 1); // 1
            AddComplexComponent((BaseAddon) this, 12438, 0, 0, 0, 1600, -1, "", 1); // 2
            AddComplexComponent((BaseAddon) this, 12439, 0, -1, 0, 1600, -1, "", 1); // 3
        }

        public TableSawEastAddon(Serial serial) : base(serial)
        {}

        private static void AddComplexComponent(BaseAddon addon, int item, int xoffset, int yoffset, int zoffset,
            int hue, int lightsource)
        {
            AddComplexComponent(addon, item, xoffset, yoffset, zoffset, hue, lightsource, null, 1);
        }

        private static void AddComplexComponent(BaseAddon addon, int item, int xoffset, int yoffset, int zoffset,
            int hue, int lightsource, string name, int amount)
        {
            AddonComponent ac;
            ac = new AddonComponent(item);
            if (name != null && name.Length > 0)
            {
                ac.Name = name;
            }
            if (hue != 0)
            {
                ac.Hue = hue;
            }
            if (amount > 1)
            {
                ac.Stackable = true;
                ac.Amount = amount;
            }
            if (lightsource != -1)
            {
                ac.Light = (LightType) lightsource;
            }
            addon.AddComponent(ac, xoffset, yoffset, zoffset);
        }

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write(0); // Version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }

    public class TableSawEastAddonDeed : BaseAddonDeed
    {
        public override BaseAddon Addon { get { return new TableSawEastAddon(); } }

        [Constructable]
        public TableSawEastAddonDeed()
        {
            Name = "TableSawEast";
        }

        public TableSawEastAddonDeed(Serial serial) : base(serial)
        {}

        public override void Serialize(GenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write(0); // Version
        }

        public override void Deserialize(GenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
}